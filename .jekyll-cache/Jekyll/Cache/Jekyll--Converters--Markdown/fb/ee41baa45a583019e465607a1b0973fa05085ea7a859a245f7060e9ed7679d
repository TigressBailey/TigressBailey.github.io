I"ä=<h1 id="update-server-regularly-via-apt">Update server regularly via apt</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt list --upgradable
</code></pre></div></div>

<h1 id="install-the-specific-version-nodejs-on-server">Install the specific version nodejs on server</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
</code></pre></div></div>
<p>and</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install nodejs
</code></pre></div></div>

<h1 id="check-server-open-ports-from-the-local-laptop">Check server open ports from the local laptop</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap SERVER_IP
</code></pre></div></div>
<p>Advanced info for the connection info of all the ports</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap -sV SERVER_IP
</code></pre></div></div>

<h1 id="control-connection-using-iptableshigh-dangerous-and-not-recommend-to-new-users">Control connection using iptables(High dangerous and not recommend to new users)</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">-A append rule</code></li>
  <li><code class="highlighter-rouge">-p protocol (tcp, icmp)</code></li>
  <li><code class="highlighter-rouge">--dport destination port</code></li>
  <li><code class="highlighter-rouge">-j jump (DROP, REJECT, ACCEPT, LOG)</code></li>
</ul>

<p>For example:</p>
<ol>
  <li>Create an iptable rule to block all outgoing HTTP connections
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iptables -A OUTPUT -p tcp --dport 80 -j REJECT
</code></pre></div>    </div>
  </li>
  <li>Create an iptable rule to only allow icmp connections on port 892 from the IP address 192.0.0.1
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iptables -A INPUT -s 192.0.0.1 -p icmp --dport 892 -j ACCEPT
</code></pre></div>    </div>
  </li>
</ol>

<h1 id="control-connection-using-uncomplicated-firewall">Control connection using uncomplicated firewall</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ufw allow ssh
sudo ufw enable
</code></pre></div></div>
<p>And block all outgoing HTTP connections</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ufw reject out http
</code></pre></div></div>

<h1 id="update-system-dependencies-automatically">Update system dependencies automatically</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install unattended-upgrades
</code></pre></div></div>
<p>Check the config is right</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat /etc/apt/apt.conf.d/20auto-upgrades
</code></pre></div></div>
<p>It should be</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
</code></pre></div></div>
<p>Only update security packages because the software package may change a lot and break something</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/apt/apt.conf.d/50unattended-upgrades
</code></pre></div></div>
<p>Comment the <code class="highlighter-rouge">"${distro_id}:${distro_codename}";</code> line and the file would be:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unattended-Upgrade::Allowed-Origins {
//      "${distro_id}:${distro_codename}";
        "${distro_id}:${distro_codename}-security";
        // Extended Security Maintenance; doesn't necessarily exist for
        // every release and this system may not have it installed, but if
        // available, the policy for updates is such that unattended-upgrades
        // should also install from here by default.
        "${distro_id}ESM:${distro_codename}";
//      "${distro_id}:${distro_codename}-updates";
//      "${distro_id}:${distro_codename}-proposed";
//      "${distro_id}:${distro_codename}-backports";
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
//      "vim";
//      "libc6";
//      "libc6-dev";
//      "libc6-i686";
};
</code></pre></div></div>

<h1 id="install-fail2ban-and-check-the-ban-log">Install Fail2ban and check the ban log</h1>
<ol>
  <li>Install it
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install fail2ban
</code></pre></div>    </div>
  </li>
  <li>Copy jail file
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
</code></pre></div>    </div>
  </li>
  <li>Edit your own strategy
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/fail2ban/jail.local
</code></pre></div>    </div>
    <blockquote>
      <p>If you misconfigure fail2ban, you can lock yourself out of your server!</p>
    </blockquote>
  </li>
  <li>Check the ban history
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo tail -f /var/log/fail2ban.log
</code></pre></div>    </div>
  </li>
  <li>Find and Grep
    <ul>
      <li>Find: filter file names
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /directory -name filename.txt
</code></pre></div>        </div>
        <ul>
          <li><code class="highlighter-rouge">-name</code> can be replaced with <code class="highlighter-rouge">type</code>, <code class="highlighter-rouge">empty</code>, <code class="highlighter-rouge">executable</code> and <code class="highlighter-rouge">writable</code></li>
          <li>For example, Find all empty files in /etc
            <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /etc -type f -empty
</code></pre></div>            </div>
          </li>
          <li>Find all directories with the word log
            <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / -type d -name log
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Grep: filter file contents
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep -i â€˜jemâ€™ /var/www
</code></pre></div>        </div>
        <ul>
          <li>Search in gzip file
            <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zgrep FILE
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Find running node processes
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux | grep node
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h1 id="redirection-operators">Redirection operators</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|
read from stdout
&gt;
write stdout to file
&gt;&gt;
append stdout to file
&lt;
read from stdin
2&gt;
read from stderr
</code></pre></div></div>
<p>For example: Read from bar to foo and write in baz</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foo &lt; bar &gt; baz
</code></pre></div></div>

<p>#Shell</p>

<h3 id="display-current-shell">Display current shell</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $0
</code></pre></div></div>

<h3 id="chmod">chmod</h3>

<h4 id="andybody-can-read-write-execute">Andybody can read, write, execute.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 777 filename
chmod -R 777 dir
</code></pre></div></div>
<h4 id="ownergroup-can-read-write-execute-everyone-else-can-read-execute">Owner&amp;Group can read, write, execute. Everyone else can read, execute.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 775 filename
chmod -R 775 dir
</code></pre></div></div>
<h4 id="owner--group-can-read-write-execute-everyone-else-can-read">Owner &amp; Group can read, write, execute. Everyone else can read.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 774 filename
chmod -R 774 dir
</code></pre></div></div>
<h4 id="owner-can-read-write-execute-everyone-else-can-read-execute">Owner can read, write, execute. Everyone else can read, execute.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 755 filename
chmod -R 755 dir
</code></pre></div></div>
<h4 id="owner-can-read-write-execute-no-one-else-has-any-rights">Owner can read, write, execute. No one else has any rights.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 700 filename
chmod -R 700 dir
</code></pre></div></div>
<h4 id="everyone-can-read-write">Everyone can read, write.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 666 filename
chmod -R 666 dir
</code></pre></div></div>

<h4 id="owner--group-can-read-write-everyone-else-can-read">Owner &amp; Group can read, write. Everyone else can read.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 664 filename
chmod -R 664 dir
</code></pre></div></div>

<h4 id="owner-can-read-write-everyone-else-can-read">Owner can read, write. Everyone else can read.</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 644 filename
chmod -R 644 dir
</code></pre></div></div>

<h1 id="https">HTTPS</h1>

<h2 id="use-certbot">Use certbot</h2>

<h3 id="add-certbot-repo">Add certbot repo</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo add-apt-repository ppa:certbot/certbot
</code></pre></div></div>

<h3 id="pull-in-new-repository-information">Pull in new repository information</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
</code></pre></div></div>

<h3 id="install-certbot">Install Certbot</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install python-certbot-nginx
</code></pre></div></div>

<h3 id="use-certbot-to-get-certificate">Use certbot to get certificate</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo certbot --nginx
</code></pre></div></div>

<h3 id="test-auto-renew">Test auto renew</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo certbot renew --dry-run
</code></pre></div></div>

<h1 id="cron---run-task-periodically">Cron - run task periodically</h1>

<h3 id="open-crontab-for-editing">open crontab for editing</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo crontab -e
</code></pre></div></div>

<p>In this file add</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00 12 * * 1 certbot renew
</code></pre></div></div>
<p>That means renew certificate every week at 12PN on Monday</p>

<p><a href="https://crontab.guru/#5_4_*_*_5">Know the cron job mean</a></p>

<h1 id="gzip">Gzip</h1>

<p>Open the nginx config file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/nginx.conf
</code></pre></div></div>
<p>Add</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gzip     on;
</code></pre></div></div>

<p>Refer this for further options</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://nginx.org/en/docs/http/ngx_http_gzip_module.html
</code></pre></div></div>

<h1 id="expires-headers">Expires headers</h1>

<p>Nginx will provide <code class="highlighter-rouge">Etag</code> originally.
That means when the file doesnâ€™t change, the server will only send back a Etag.
And the client request status will be 304 - Not modified.</p>

<p>But it bring a request from the client browser eventually.
Here we comes the expires headers!</p>

<h2 id="set-expires-headers">Set expires headers</h2>

<p>Open site file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/sites-available/default
</code></pre></div></div>
<p>Add settings for expiring static folderâ€™s assets in 30 days</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location /static/ {
  expires 30d;
  proxy_pass http://127.0.0.1:3001/static/;
}
</code></pre></div></div>
<p>Relod Nginx service and verify the result.
The static assets will be loaded from disk cache(or memory cache) and the request status is 200.
The <code class="highlighter-rouge">cache-control</code> and <code class="highlighter-rouge">expires</code> will match 30 days.</p>

<h2 id="cache">Cache</h2>

<p>Open site file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/sites-available/default
</code></pre></div></div>
<p>Add settings for cache path etc..</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxy_cache_path /tmp/nginx levels=1:2 keys_zone=slowfile_cache:10m inactive=60m use_temp_path=off;

proxy_cache_key "$request_uri";
</code></pre></div></div>
<p>Add cache folder</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location /slowfile {
  proxy_cache_valid 1m;
  proxy_ignore_headers Cache-Control;
  add_header X-Proxy-Cache $upstream_cache_status;
  proxy_cache slowfile_cache;
  proxy_pass http://127.0.0.1:3001/slowfile;
}
</code></pre></div></div>
<p>Verify it in the browser and see the response headerâ€™s <code class="highlighter-rouge">X-Proxy-Cache</code> will from <code class="highlighter-rouge">MISS</code> to <code class="highlighter-rouge">HIT</code></p>

<h2 id="websockets">Websockets</h2>

<p>Open site file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/sites-available/default
</code></pre></div></div>
<p>Add websocket to notify the upgrade in the <code class="highlighter-rouge">location  / {}</code> section</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location / {
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";

  proxy_pass http://127.0.0.1:3001;
}
</code></pre></div></div>

<h2 id="http2">HTTP2</h2>
<p>Open site file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/sites-available/default
</code></pre></div></div>
<p>Modify the certbot listen line from <code class="highlighter-rouge">listen 443 ssl;</code> to below</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>listen 443 http2 ssl; managed by certbot
</code></pre></div></div>

<h2 id="redirect">Redirect</h2>
<p>Open site file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi /etc/nginx/sites-available/default
</code></pre></div></div>
<p>Add a permanent redirect(Will be cache by the search engine)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location /help {
  return 301 https://developer.mozilaa.org/en-US/;
}
</code></pre></div></div>
:ET